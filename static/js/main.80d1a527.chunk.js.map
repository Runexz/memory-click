{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","id","src","image","onClick","checkIfClicked","Wrapper","children","Header","currentScore","topScore","class","Footer","App","state","cardImages","bind","clickedCard","this","filter","card","cardsCopy","slice","sort","a","b","Math","random","clicked","alert","resetCardsCopy","map","setState","findIndex","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gCAiBeA,G,MAZF,SAAAC,GAAK,OACd,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBACAC,IAAK,iBAAmBF,EAAMG,GAC9BC,IAAKJ,EAAMK,MACXC,QAAS,kBAAMN,EAAMO,eAAeP,EAAMG,WCFvCK,G,MAJC,SAAAR,GAAK,OACjB,yBAAKC,UAAU,qBAAqBD,EAAMS,YCgB/BC,G,MAjBA,SAAAV,GAAK,OAEhB,6BACA,yBAAKC,UAAU,yCACjB,0BAAMA,UAAU,6BAAhB,uBACuBD,EAAMW,aAD7B,iBACyDX,EAAMY,WAG/D,yBAAKC,MAAM,yBACX,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,qBACA,uBAAGA,MAAM,QAAT,+DCLWC,G,MANA,SAAAd,GAAK,OAChB,yBAAKC,UAAU,mCACX,6D,OC2EOc,E,YApEb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXC,WAAYA,EACZL,SAAU,EACVD,aAAc,GAEhB,EAAKJ,eAAiB,EAAKA,eAAeW,KAApB,gBAPL,E,4EAWJf,GAGb,IAAIgB,EAAcC,KAAKJ,MAAMC,WAAWI,QAAO,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,KAAI,GACnEoB,EAAYH,KAAKJ,MAAMC,WAAWO,QAAQC,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,YAGvF,GAAKV,EAAYW,QAaZ,CACHC,MAAM,2CACN,IAAIC,EAAiBT,EAAUU,KAAI,SAACX,GAClC,MAAO,CACLnB,GAAImB,EAAKnB,GACTE,MAAOiB,EAAKjB,MACZyB,SAAS,MAGbV,KAAKc,SAAS,CACZjB,WAAYe,EACZrB,aAAc,SAvBhBQ,EAAYW,SAAU,EACtBP,EAAUA,EAAUY,WAAU,SAACb,GAAD,OAAUA,EAAKnB,KAAOA,MAAOgB,EAG3DC,KAAKc,SAAS,CACZjB,WAAYM,EACZZ,aAAcS,KAAKJ,MAAML,aAAe,EACxCC,SAAWQ,KAAKJ,MAAML,aAAe,EAAIS,KAAKJ,MAAMJ,SAAWQ,KAAKJ,MAAML,aAAe,EAAIS,KAAKJ,MAAMJ,a,+BAsBpG,IAAD,OACP,OACE,yBAAKX,UAAU,aACb,kBAAC,EAAD,CAAQU,aAAcS,KAAKJ,MAAML,aAAcC,SAAUQ,KAAKJ,MAAMJ,WACpE,kBAAC,EAAD,KACGQ,KAAKJ,MAAMC,WAAWgB,KAAI,SAAAX,GAAI,OAC7B,kBAAC,EAAD,CACEf,eAAgB,EAAKA,eACrBJ,GAAImB,EAAKnB,GACTiC,IAAKd,EAAKnB,GACVE,MAAOiB,EAAKjB,YAIlB,kBAAC,EAAD,W,GA/DUgC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.80d1a527.chunk.js","sourcesContent":["// Card.js\n\nimport React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <img\n            alt={\"This is image \" + props.id}\n            src={props.image}\n            onClick={() => props.checkIfClicked(props.id)}\n            />\n        </div>\n    </div>\n);\n\nexport default Card;","// Wrapper.js\n\nimport React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => (\n    <div className=\"container wrapper\">{props.children}</div>\n);\n\nexport default Wrapper;","// Header.js\n\nimport React from \"react\";\nimport \"./Header.css\"\n\nconst Header = props => (\n\n    <div>\n    <nav className=\"navbar bg-dark justify-content-center\">\n  <span className=\"navbar-text text-white h3\">\n    Current Game Score: {props.currentScore} | Top Score: {props.topScore}\n  </span>\n  </nav>\n  <div class=\"jumbotron text-center\">\n  <div class=\"container\">\n    <h1 class=\"display-4\">Memory Click Game</h1>\n    <p class=\"lead\">Click an image but dont click it again or you restart!</p>\n  </div>\n</div>\n  </div>\n);\n\nexport default Header;","// Footer.js\n\nimport React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = props => (\n    <div className=\"footer text-center bg-danger h5\">\n        <p>Ricardo Rodriguez &copy; 2019</p>\n    </div>\n)\n\nexport default Footer;","import React, { Component } from 'react';\n\nimport Card from './components/Card';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n// Import the cards from json list that has images links in it.\nimport cardImages from \"./cardImages.json\";\n\n// Creates constructor props from cards to set the top and current score to 0\n// topScore is the most cards clicked without being clicked again\n// currentScore is the most clicked this round without being clicked again and will reset to 0 if duplicated\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardImages: cardImages,\n      topScore: 0,\n      currentScore: 0,\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n\n  // This function will see if a card has been clicked\n  checkIfClicked(id) {\n\n    // Create a copy of the cards with a random math method to sort the array\n    let clickedCard = this.state.cardImages.filter(card => card.id === id)[0];\n    let cardsCopy = this.state.cardImages.slice().sort(function (a, b) { return 0.5 - Math.random() });\n\n    // If a card has not been clicked then set its click state to true\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      cardsCopy[cardsCopy.findIndex((card) => card.id === id)] = clickedCard;\n\n      // Set the STATE and increments the counter\n      this.setState({\n        cardImages: cardsCopy,\n        currentScore: this.state.currentScore + 1,\n        topScore: (this.state.currentScore + 1 > this.state.topScore ? this.state.currentScore + 1 : this.state.topScore),\n      });\n    }\n\n    // If a card has already been clicked then set its click to false and reset the game\n    else {\n      alert(\"You clicked the same image! Start over!\");\n      let resetCardsCopy = cardsCopy.map((card) => {\n        return {\n          id: card.id,\n          image: card.image,\n          clicked: false,\n        }\n      });\n      this.setState({\n        cardImages: resetCardsCopy,\n        currentScore: 0,\n      });\n      \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header currentScore={this.state.currentScore} topScore={this.state.topScore} />\n        <Wrapper>\n          {this.state.cardImages.map(card => (\n            <Card\n              checkIfClicked={this.checkIfClicked}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}